// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}

interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

// Text settings for custom positioning and styling
interface TextSettings {
  position: { x: number; y: number };
  fontSize: number;
  color: string;
}

// Photobooth types
interface PhotoMetadata {
  frameTemplateId?: string;
  frameText?: string;
  textSettings?: TextSettings;
  overlays: any[];
}

interface GeneratedPhotoMetadata {
  originalPhotoId: string;
  frameTemplateId?: string;
  frameText?: string;
  textSettings?: TextSettings;
  overlays: any[];
}

interface PhotoData {
  id: string;
  filename: string;
  file_path: string;
  thumbnail_path?: string;
  original_width: number;
  original_height: number;
  file_size: number;
  created_at: string;
  updated_at: string;
  is_edited: boolean;
  is_deleted: boolean;
}

interface PhotoEditData {
  photoId: string;
  frameTemplateId?: string;
  frameText?: string;
  textSettings?: TextSettings;
  overlays: any[];
}

interface CameraDevice {
  id: string;
  label: string;
  kind: 'videoinput';
}

interface StorageAPI {
  savePhoto(photoData: string, metadata: PhotoMetadata): Promise<PhotoData>;
  savePhotoEdit(editData: PhotoEditData): Promise<any>;
  saveGeneratedPhoto(photoData: string, metadata: GeneratedPhotoMetadata): Promise<PhotoData>;
  getPhotos(): Promise<PhotoData[]>;
  deletePhoto(photoId: string): Promise<void>;
  getStoragePath(): Promise<string>;
  addToDisplayQueue(photoId: string): Promise<void>;
}

// Digicampro camera configuration
interface DigicamproConfig {
  liveFeedUrl: string;
  captureUrl: string;
  refreshRate: number; // fps
  timeout: number; // milliseconds
  retryAttempts: number;
}

interface CameraAPI {
  getPermissions(): Promise<{
    success: boolean;
    hasPermission: boolean;
    status?: string;
    error?: string;
  }>;
  requestPermissions(): Promise<{
    success: boolean;
    hasPermission: boolean;
    status?: string;
    error?: string;
  }>;
  // New digicampro methods
  captureFromServer(): Promise<{
    success: boolean;
    imageData?: string;
    error?: string;
  }>;
  testConnection(config: DigicamproConfig): Promise<{
    success: boolean;
    liveFeedReachable?: boolean;
    captureReachable?: boolean;
    error?: string;
  }>;
}

interface PhotoDatabaseAPI {
  testConnection(): Promise<{ success: boolean; connected?: boolean; error?: string }>;
  savePhoto(photoData: any): Promise<{ success: boolean; photo?: any; error?: string }>;
  getPhotos(limit?: number): Promise<{ success: boolean; photos?: any[]; error?: string }>;
  deletePhoto(photoId: string): Promise<{ success: boolean; error?: string }>;
  getPhotoCount(): Promise<{ success: boolean; count?: number; error?: string }>;
  runMigration(): Promise<{ success: boolean; error?: string }>;
}

interface GCSStorageAPI {
  uploadPhoto(photoData: string, filename?: string): Promise<{ success: boolean; result?: any; error?: string }>;
  uploadThumbnail(photoData: string, filename?: string): Promise<{ success: boolean; result?: any; error?: string }>;
  deletePhoto(gcsPath: string): Promise<{ success: boolean; error?: string }>;
  testConnection(): Promise<{ success: boolean; connected?: boolean; error?: string }>;
}

interface ConfigAPI {
  getConfig(): Promise<{
    success: boolean;
    config?: DigicamproConfig;
    error?: string;
  }>;
  saveConfig(config: DigicamproConfig): Promise<{
    success: boolean;
    error?: string;
  }>;
  resetConfig(): Promise<{
    success: boolean;
    error?: string;
  }>;
}

interface ModalAPI {
  openConfig(): Promise<{
    success: boolean;
  }>;
  closeConfig(): Promise<{
    success: boolean;
  }>;
}

// DigiCamControl API
interface DigicamAPI {
  capture(): Promise<{
    success: boolean;
    message?: string;
    error?: string;
  }>;
  checkStatus(): Promise<{
    connected: boolean;
    message?: string;
    error?: string;
  }>;
  onNewImage(callback: (data: { original: string; processed: string }) => void): void;
  removeAllListeners(channel: string): void;
}

// DigiCamControl configuration
interface DccConfig {
  liveViewUrl: string;
  photoUrl: string;
  baseUrl: string;
  captureUrl: string;
  galleryUrl: string;
  statusUrl: string;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  storageAPI: StorageAPI;
  cameraAPI: CameraAPI;
  photoDatabase: PhotoDatabaseAPI;
  gcsStorage: GCSStorageAPI;
  configAPI: ConfigAPI;
  modalAPI: ModalAPI;
  digicamAPI: DigicamAPI;
  dccConfig: DccConfig;
}